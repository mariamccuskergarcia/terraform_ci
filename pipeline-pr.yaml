# This gives a structured name for each pipeline_run 
# a pipeline_run is event of a specific time the pipeline was run and the logs resulting from it
name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Because PR have to be attached to Branch policies they don't need to 
#  have a trigger defined in the yaml, have to do it on UI
trigger: none

# Here we allow for different versions of python to be used
#  these can be selected from the UI when triggering a manual run
parameters:
  - name: PythonVersion
    type: string
    values:
      - 3.9
      - 3.10
      - 3.11
    default: 3.11

# Here we are defining what the Agent that runs our pipeline looks like
#  in this case it is a windows machine
pool:
  vmImage: windows-latest

# This pipeline has a single stage and a single job, so we can jump straight into steps
#  we will see in the CICE one an example with more hierarchical layers
steps:
  
  # this step gets the content of the git repository into the pipeline agent
  - checkout: self

  # this is a task that installs python for us
  - task: UsePythonVersion@0
    displayName: "Use Python"
    inputs:
      versionSpec: ${{ parameters.PythonVersion }}

  # the task below runs command line instructions for us
  #  in this specific case we are:
  #    1) installing the packages needed to run our CI tests
  #    2) running the tests and outputting results to a standard format
  - script: |
      pip install -r requirements.txt
      pytest --junitxml=TEST-shiftleft.xml
    workingDirectory: tests/ci
    displayName: "Run the CI tests"

  # This task publishes the results of the tests so we can explore it in the AzDO UI
  - task: PublishTestResults@2
    displayName: "Publish Test Results **/TEST-**.xml"
    inputs:
      searchFolder: tests/ci
      failTaskOnFailedTests: true
    condition: always()
